---
name: Continuous Integration

on:
  pull_request:
    branches:
      - '*'

jobs:
  lint-and-unit-test:
    needs:
      - lint-scripts
    name: Lint and unit test packages
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install Node
        run: |
          source $HOME/.nvm/nvm.sh
          nvm install $(cat .nvmrc)
          echo "$HOME/.nvm/versions/node/$(cat .nvmrc)/bin" >> $GITHUB_PATH
          echo "$(pwd)/node_modules/.bin" >> $GITHUB_PATH
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      - name: Run lint
        run: |
          npm run lint
      - name: Build and unit test
        run: |
          npm run build
          npm run test
  default-join-server-integration-test:
    needs:
      - lint-and-unit-test
    name: Default Join Server internal "integration test"
    runs-on: ubuntu-20.04
    env:
      SECRET_DB_SCHEMA: join-server-test
      SECRET_DB_USER: root
      SECRET_DB_PASSWORD: password
      SECRET_DB_HOST: localhost
      SECRET_DB_PORT: 3800
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.SECRET_DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.SECRET_DB_SCHEMA }}
          MYSQL_USER: ${{ env.SECRED_DB_USER }}
          MYSQL_PASSWORD: ${{ env.SECRET_DB_PASSWORD }}
        ports:
          - 3800:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install Node
        run: |
          source $HOME/.nvm/nvm.sh
          nvm install $(cat .nvmrc)
          echo "$HOME/.nvm/versions/node/$(cat .nvmrc)/bin" >> $GITHUB_PATH
          echo "$(pwd)/node_modules/.bin" >> $GITHUB_PATH
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      - name: Integration test (with mysql)
        run: |
          mysql --user=${{env.SECRET_DB_USER}} --password=${{env.SECRET_DB_PASSWORD}} --host=127.0.0.1 --port=${{env.SECRET_DB_PORT}} < packages/default-join-server/create_tables.sql
          npm run -w packages/default-join-server integration-test
  subgraph-integration-test:
    needs:
      - lint-and-unit-test
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Install Node
        run: |
          source $HOME/.nvm/nvm.sh
          nvm install $(cat .nvmrc)
          echo "$HOME/.nvm/versions/node/$(cat .nvmrc)/bin" >> $GITHUB_PATH
          echo "$(pwd)/node_modules/.bin" >> $GITHUB_PATH
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --no-audit
      - name: Build packages
        run: npm run build
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0
        with:
          services-to-start: 'graph-deploy-dataunion-subgraph'
      - name: Deploy the DU subgraph
        run: npm run -w packages/subgraph deploy-local
      - name: Integration Test (with dev-docker environment)
        env:
          TEST_TIMEOUT: '600000'
          DEBUG: "*,-mocha:*"
        run: npm run -w packages/subgraph integration-test
